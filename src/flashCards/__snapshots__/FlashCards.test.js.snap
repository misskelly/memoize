// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`FlashCards should match snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <FlashCards
    card={
      Object {
        "cardNumber": 214,
        "categoryId": 2,
        "definition": "Simulates an event on an element by passing the event name string in as an argument.",
        "term": ".simulate()",
      }
    }
    deck={
      Array [
        Object {
          "cardNumber": 101,
          "categoryId": 1,
          "definition": "A client-side JavaScript framework that allows you to easily and efficiently manipulate the DOM based on application data and how it changes in response to user interaction",
          "term": "React",
        },
        Object {
          "cardNumber": 102,
          "categoryId": 1,
          "definition": "An in-memory object that represents a DOM structure and can be manipulated with JavaScript before updating the real DOM",
          "term": "The Virtual DOM",
        },
        Object {
          "cardNumber": 103,
          "categoryId": 1,
          "definition": "A mix of JavaScript and XML that facilitates rendering the appropriate HTML, lives inside a component",
          "term": "JSX",
        },
        Object {
          "cardNumber": 104,
          "categoryId": 1,
          "definition": "Reusable pieces of code that represent templates for a particular instance of a UI element. They are either functions or an extended ES6 class",
          "term": "Component",
        },
      ]
    }
    getRandomCard={[MockFunction]}
    removeFromDeck={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <Card
        cardId={214}
        definition="Simulates an event on an element by passing the event name string in as an argument."
        getRandomCard={[MockFunction]}
        removeFromDeck={[MockFunction]}
        term=".simulate()"
      />,
      "className": "flashCards",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "cardId": 214,
        "definition": "Simulates an event on an element by passing the event name string in as an argument.",
        "getRandomCard": [MockFunction],
        "removeFromDeck": [MockFunction],
        "term": ".simulate()",
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
    "type": "section",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <Card
          cardId={214}
          definition="Simulates an event on an element by passing the event name string in as an argument."
          getRandomCard={[MockFunction]}
          removeFromDeck={[MockFunction]}
          term=".simulate()"
        />,
        "className": "flashCards",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "cardId": 214,
          "definition": "Simulates an event on an element by passing the event name string in as an argument.",
          "getRandomCard": [MockFunction],
          "removeFromDeck": [MockFunction],
          "term": ".simulate()",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      "type": "section",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
