// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Menu should match snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Menu
    allCards={
      Array [
        Object {
          "cardNumber": 101,
          "categoryId": 1,
          "definition": "A client-side JavaScript framework that allows you to easily and efficiently manipulate the DOM based on application data and how it changes in response to user interaction",
          "term": "React",
        },
        Object {
          "cardNumber": 102,
          "categoryId": 1,
          "definition": "An in-memory object that represents a DOM structure and can be manipulated with JavaScript before updating the real DOM",
          "term": "The Virtual DOM",
        },
        Object {
          "cardNumber": 103,
          "categoryId": 1,
          "definition": "A mix of JavaScript and XML that facilitates rendering the appropriate HTML, lives inside a component",
          "term": "JSX",
        },
        Object {
          "cardNumber": 205,
          "categoryId": 2,
          "definition": "A JavaScript Testing utility for React that makes it easier to test your React Components' output.  It allows test files to be more readable and provides us with helper methods for testing common pieces of functionality.",
          "term": "Enzyme",
        },
      ]
    }
    updateDeck={[Function]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <h3
          className="greetingHeading"
        >
          Hello Friend!
        </h3>,
        <form
          className="menuForm"
          onSubmit={[Function]}
        >
          <label
            className="nameInputLabel"
            htmlFor="nameInput"
          >
            Student Name
          </label>
          <input
            className="nameInput"
            id="nameInput"
            onChange={[Function]}
            placeholder="Your name here....."
            type="text"
          />
          <button
            autoComplete="fname"
            autoFocus={true}
            className="updateNameButton"
            type="submit"
          />
          <h4
            className="chooseDeckHeading"
          >
            Which terms would you like to review?
          </h4>
          <Button
            buttonText="React Basics"
            label=""
            selectDeck={[Function]}
            type="basicsDeckBtn"
            updateDeck={[Function]}
          />
          <Button
            buttonText="React Testing"
            label=""
            selectDeck={[Function]}
            type="testingDeckBtn"
          />
          <Button
            buttonText="Keep Going"
            label=""
            type="previousDeck"
            updateDeck={[Function]}
          />
          <Button
            allCards={
              Array [
                Object {
                  "cardNumber": 101,
                  "categoryId": 1,
                  "definition": "A client-side JavaScript framework that allows you to easily and efficiently manipulate the DOM based on application data and how it changes in response to user interaction",
                  "term": "React",
                },
                Object {
                  "cardNumber": 102,
                  "categoryId": 1,
                  "definition": "An in-memory object that represents a DOM structure and can be manipulated with JavaScript before updating the real DOM",
                  "term": "The Virtual DOM",
                },
                Object {
                  "cardNumber": 103,
                  "categoryId": 1,
                  "definition": "A mix of JavaScript and XML that facilitates rendering the appropriate HTML, lives inside a component",
                  "term": "JSX",
                },
                Object {
                  "cardNumber": 205,
                  "categoryId": 2,
                  "definition": "A JavaScript Testing utility for React that makes it easier to test your React Components' output.  It allows test files to be more readable and provides us with helper methods for testing common pieces of functionality.",
                  "term": "Enzyme",
                },
              ]
            }
            buttonText="Everything"
            label=""
            type="fullDeck"
          />
        </form>,
      ],
      "className": "mainMenu",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Hello Friend!",
          "className": "greetingHeading",
        },
        "ref": null,
        "rendered": "Hello Friend!",
        "type": "h3",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <label
              className="nameInputLabel"
              htmlFor="nameInput"
            >
              Student Name
            </label>,
            <input
              className="nameInput"
              id="nameInput"
              onChange={[Function]}
              placeholder="Your name here....."
              type="text"
            />,
            <button
              autoComplete="fname"
              autoFocus={true}
              className="updateNameButton"
              type="submit"
            />,
            <h4
              className="chooseDeckHeading"
            >
              Which terms would you like to review?
            </h4>,
            <Button
              buttonText="React Basics"
              label=""
              selectDeck={[Function]}
              type="basicsDeckBtn"
              updateDeck={[Function]}
            />,
            <Button
              buttonText="React Testing"
              label=""
              selectDeck={[Function]}
              type="testingDeckBtn"
            />,
            <Button
              buttonText="Keep Going"
              label=""
              type="previousDeck"
              updateDeck={[Function]}
            />,
            <Button
              allCards={
                Array [
                  Object {
                    "cardNumber": 101,
                    "categoryId": 1,
                    "definition": "A client-side JavaScript framework that allows you to easily and efficiently manipulate the DOM based on application data and how it changes in response to user interaction",
                    "term": "React",
                  },
                  Object {
                    "cardNumber": 102,
                    "categoryId": 1,
                    "definition": "An in-memory object that represents a DOM structure and can be manipulated with JavaScript before updating the real DOM",
                    "term": "The Virtual DOM",
                  },
                  Object {
                    "cardNumber": 103,
                    "categoryId": 1,
                    "definition": "A mix of JavaScript and XML that facilitates rendering the appropriate HTML, lives inside a component",
                    "term": "JSX",
                  },
                  Object {
                    "cardNumber": 205,
                    "categoryId": 2,
                    "definition": "A JavaScript Testing utility for React that makes it easier to test your React Components' output.  It allows test files to be more readable and provides us with helper methods for testing common pieces of functionality.",
                    "term": "Enzyme",
                  },
                ]
              }
              buttonText="Everything"
              label=""
              type="fullDeck"
            />,
          ],
          "className": "menuForm",
          "onSubmit": [Function],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Student Name",
              "className": "nameInputLabel",
              "htmlFor": "nameInput",
            },
            "ref": null,
            "rendered": "Student Name",
            "type": "label",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "className": "nameInput",
              "id": "nameInput",
              "onChange": [Function],
              "placeholder": "Your name here.....",
              "type": "text",
            },
            "ref": null,
            "rendered": null,
            "type": "input",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "autoComplete": "fname",
              "autoFocus": true,
              "className": "updateNameButton",
              "type": "submit",
            },
            "ref": null,
            "rendered": null,
            "type": "button",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Which terms would you like to review?",
              "className": "chooseDeckHeading",
            },
            "ref": null,
            "rendered": "Which terms would you like to review?",
            "type": "h4",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "buttonText": "React Basics",
              "getRandomCard": undefined,
              "label": "",
              "selectDeck": [Function],
              "type": "basicsDeckBtn",
              "updateDeck": [Function],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "buttonText": "React Testing",
              "label": "",
              "selectDeck": [Function],
              "type": "testingDeckBtn",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "buttonText": "Keep Going",
              "getRandomCard": undefined,
              "label": "",
              "type": "previousDeck",
              "updateDeck": [Function],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "allCards": Array [
                Object {
                  "cardNumber": 101,
                  "categoryId": 1,
                  "definition": "A client-side JavaScript framework that allows you to easily and efficiently manipulate the DOM based on application data and how it changes in response to user interaction",
                  "term": "React",
                },
                Object {
                  "cardNumber": 102,
                  "categoryId": 1,
                  "definition": "An in-memory object that represents a DOM structure and can be manipulated with JavaScript before updating the real DOM",
                  "term": "The Virtual DOM",
                },
                Object {
                  "cardNumber": 103,
                  "categoryId": 1,
                  "definition": "A mix of JavaScript and XML that facilitates rendering the appropriate HTML, lives inside a component",
                  "term": "JSX",
                },
                Object {
                  "cardNumber": 205,
                  "categoryId": 2,
                  "definition": "A JavaScript Testing utility for React that makes it easier to test your React Components' output.  It allows test files to be more readable and provides us with helper methods for testing common pieces of functionality.",
                  "term": "Enzyme",
                },
              ],
              "allTerms": undefined,
              "buttonText": "Everything",
              "getRandomCard": undefined,
              "label": "",
              "type": "fullDeck",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": "form",
      },
    ],
    "type": "section",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <h3
            className="greetingHeading"
          >
            Hello Friend!
          </h3>,
          <form
            className="menuForm"
            onSubmit={[Function]}
          >
            <label
              className="nameInputLabel"
              htmlFor="nameInput"
            >
              Student Name
            </label>
            <input
              className="nameInput"
              id="nameInput"
              onChange={[Function]}
              placeholder="Your name here....."
              type="text"
            />
            <button
              autoComplete="fname"
              autoFocus={true}
              className="updateNameButton"
              type="submit"
            />
            <h4
              className="chooseDeckHeading"
            >
              Which terms would you like to review?
            </h4>
            <Button
              buttonText="React Basics"
              label=""
              selectDeck={[Function]}
              type="basicsDeckBtn"
              updateDeck={[Function]}
            />
            <Button
              buttonText="React Testing"
              label=""
              selectDeck={[Function]}
              type="testingDeckBtn"
            />
            <Button
              buttonText="Keep Going"
              label=""
              type="previousDeck"
              updateDeck={[Function]}
            />
            <Button
              allCards={
                Array [
                  Object {
                    "cardNumber": 101,
                    "categoryId": 1,
                    "definition": "A client-side JavaScript framework that allows you to easily and efficiently manipulate the DOM based on application data and how it changes in response to user interaction",
                    "term": "React",
                  },
                  Object {
                    "cardNumber": 102,
                    "categoryId": 1,
                    "definition": "An in-memory object that represents a DOM structure and can be manipulated with JavaScript before updating the real DOM",
                    "term": "The Virtual DOM",
                  },
                  Object {
                    "cardNumber": 103,
                    "categoryId": 1,
                    "definition": "A mix of JavaScript and XML that facilitates rendering the appropriate HTML, lives inside a component",
                    "term": "JSX",
                  },
                  Object {
                    "cardNumber": 205,
                    "categoryId": 2,
                    "definition": "A JavaScript Testing utility for React that makes it easier to test your React Components' output.  It allows test files to be more readable and provides us with helper methods for testing common pieces of functionality.",
                    "term": "Enzyme",
                  },
                ]
              }
              buttonText="Everything"
              label=""
              type="fullDeck"
            />
          </form>,
        ],
        "className": "mainMenu",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Hello Friend!",
            "className": "greetingHeading",
          },
          "ref": null,
          "rendered": "Hello Friend!",
          "type": "h3",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <label
                className="nameInputLabel"
                htmlFor="nameInput"
              >
                Student Name
              </label>,
              <input
                className="nameInput"
                id="nameInput"
                onChange={[Function]}
                placeholder="Your name here....."
                type="text"
              />,
              <button
                autoComplete="fname"
                autoFocus={true}
                className="updateNameButton"
                type="submit"
              />,
              <h4
                className="chooseDeckHeading"
              >
                Which terms would you like to review?
              </h4>,
              <Button
                buttonText="React Basics"
                label=""
                selectDeck={[Function]}
                type="basicsDeckBtn"
                updateDeck={[Function]}
              />,
              <Button
                buttonText="React Testing"
                label=""
                selectDeck={[Function]}
                type="testingDeckBtn"
              />,
              <Button
                buttonText="Keep Going"
                label=""
                type="previousDeck"
                updateDeck={[Function]}
              />,
              <Button
                allCards={
                  Array [
                    Object {
                      "cardNumber": 101,
                      "categoryId": 1,
                      "definition": "A client-side JavaScript framework that allows you to easily and efficiently manipulate the DOM based on application data and how it changes in response to user interaction",
                      "term": "React",
                    },
                    Object {
                      "cardNumber": 102,
                      "categoryId": 1,
                      "definition": "An in-memory object that represents a DOM structure and can be manipulated with JavaScript before updating the real DOM",
                      "term": "The Virtual DOM",
                    },
                    Object {
                      "cardNumber": 103,
                      "categoryId": 1,
                      "definition": "A mix of JavaScript and XML that facilitates rendering the appropriate HTML, lives inside a component",
                      "term": "JSX",
                    },
                    Object {
                      "cardNumber": 205,
                      "categoryId": 2,
                      "definition": "A JavaScript Testing utility for React that makes it easier to test your React Components' output.  It allows test files to be more readable and provides us with helper methods for testing common pieces of functionality.",
                      "term": "Enzyme",
                    },
                  ]
                }
                buttonText="Everything"
                label=""
                type="fullDeck"
              />,
            ],
            "className": "menuForm",
            "onSubmit": [Function],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Student Name",
                "className": "nameInputLabel",
                "htmlFor": "nameInput",
              },
              "ref": null,
              "rendered": "Student Name",
              "type": "label",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "className": "nameInput",
                "id": "nameInput",
                "onChange": [Function],
                "placeholder": "Your name here.....",
                "type": "text",
              },
              "ref": null,
              "rendered": null,
              "type": "input",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "autoComplete": "fname",
                "autoFocus": true,
                "className": "updateNameButton",
                "type": "submit",
              },
              "ref": null,
              "rendered": null,
              "type": "button",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Which terms would you like to review?",
                "className": "chooseDeckHeading",
              },
              "ref": null,
              "rendered": "Which terms would you like to review?",
              "type": "h4",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "buttonText": "React Basics",
                "getRandomCard": undefined,
                "label": "",
                "selectDeck": [Function],
                "type": "basicsDeckBtn",
                "updateDeck": [Function],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "buttonText": "React Testing",
                "label": "",
                "selectDeck": [Function],
                "type": "testingDeckBtn",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "buttonText": "Keep Going",
                "getRandomCard": undefined,
                "label": "",
                "type": "previousDeck",
                "updateDeck": [Function],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "allCards": Array [
                  Object {
                    "cardNumber": 101,
                    "categoryId": 1,
                    "definition": "A client-side JavaScript framework that allows you to easily and efficiently manipulate the DOM based on application data and how it changes in response to user interaction",
                    "term": "React",
                  },
                  Object {
                    "cardNumber": 102,
                    "categoryId": 1,
                    "definition": "An in-memory object that represents a DOM structure and can be manipulated with JavaScript before updating the real DOM",
                    "term": "The Virtual DOM",
                  },
                  Object {
                    "cardNumber": 103,
                    "categoryId": 1,
                    "definition": "A mix of JavaScript and XML that facilitates rendering the appropriate HTML, lives inside a component",
                    "term": "JSX",
                  },
                  Object {
                    "cardNumber": 205,
                    "categoryId": 2,
                    "definition": "A JavaScript Testing utility for React that makes it easier to test your React Components' output.  It allows test files to be more readable and provides us with helper methods for testing common pieces of functionality.",
                    "term": "Enzyme",
                  },
                ],
                "allTerms": undefined,
                "buttonText": "Everything",
                "getRandomCard": undefined,
                "label": "",
                "type": "fullDeck",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": "form",
        },
      ],
      "type": "section",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;
