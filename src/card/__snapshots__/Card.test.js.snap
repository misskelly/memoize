// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Card should match snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Card
    cardId={214}
    definition="Simulates an event on an element by passing the event name string in as an argument."
    getRandomCard={[MockFunction]}
    removeFromDeck={[MockFunction]}
    term=".simulate()"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <article
          className="termSide card"
        >
          <h4
            className="termText"
          >
            .simulate()
          </h4>
          <div
            className="iconBtnWrapper"
          >
            <img
              alt="I am a little trash can! Click me to remove this card from the deck."
              className="icon trash"
              role="button"
              src="trash.png"
            />
            <img
              alt="I am a curved arrow! Click me to filp the card over and see the answer."
              className="icon arrow"
              role="button"
              src="flipArrow.png"
            />
          </div>
        </article>,
        <article
          className="definitionSide card"
        >
          <p
            className="definitionText"
          >
            Simulates an event on an element by passing the event name string in as an argument.
          </p>
          <form
            className="buttons"
          >
            <Button
              buttonText="Nailed it!"
              cardId={214}
              getRandomCard={[MockFunction]}
              lable="Remove this flashcard, this one is memorized!"
              removeFromDeck={[MockFunction]}
              type="removeBtn"
            />
            <Button
              buttonText="So Close!"
              getRandomCard={[MockFunction]}
              lable="Better come back to that one later."
              type="almostBtn"
            />
            <Button
              buttonText="Not a clue."
              cardId={214}
              getRandomCard={[MockFunction]}
              lable="Yikes, I need extra review on that one!"
              type="wrongAnswerBtn"
            />
          </form>
        </article>,
      ],
      "className": "featuredCard",
      "id": 214,
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <h4
              className="termText"
            >
              .simulate()
            </h4>,
            <div
              className="iconBtnWrapper"
            >
              <img
                alt="I am a little trash can! Click me to remove this card from the deck."
                className="icon trash"
                role="button"
                src="trash.png"
              />
              <img
                alt="I am a curved arrow! Click me to filp the card over and see the answer."
                className="icon arrow"
                role="button"
                src="flipArrow.png"
              />
            </div>,
          ],
          "className": "termSide card",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": ".simulate()",
              "className": "termText",
            },
            "ref": null,
            "rendered": ".simulate()",
            "type": "h4",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <img
                  alt="I am a little trash can! Click me to remove this card from the deck."
                  className="icon trash"
                  role="button"
                  src="trash.png"
                />,
                <img
                  alt="I am a curved arrow! Click me to filp the card over and see the answer."
                  className="icon arrow"
                  role="button"
                  src="flipArrow.png"
                />,
              ],
              "className": "iconBtnWrapper",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "alt": "I am a little trash can! Click me to remove this card from the deck.",
                  "className": "icon trash",
                  "role": "button",
                  "src": "trash.png",
                },
                "ref": null,
                "rendered": null,
                "type": "img",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "alt": "I am a curved arrow! Click me to filp the card over and see the answer.",
                  "className": "icon arrow",
                  "role": "button",
                  "src": "flipArrow.png",
                },
                "ref": null,
                "rendered": null,
                "type": "img",
              },
            ],
            "type": "div",
          },
        ],
        "type": "article",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <p
              className="definitionText"
            >
              Simulates an event on an element by passing the event name string in as an argument.
            </p>,
            <form
              className="buttons"
            >
              <Button
                buttonText="Nailed it!"
                cardId={214}
                getRandomCard={[MockFunction]}
                lable="Remove this flashcard, this one is memorized!"
                removeFromDeck={[MockFunction]}
                type="removeBtn"
              />
              <Button
                buttonText="So Close!"
                getRandomCard={[MockFunction]}
                lable="Better come back to that one later."
                type="almostBtn"
              />
              <Button
                buttonText="Not a clue."
                cardId={214}
                getRandomCard={[MockFunction]}
                lable="Yikes, I need extra review on that one!"
                type="wrongAnswerBtn"
              />
            </form>,
          ],
          "className": "definitionSide card",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Simulates an event on an element by passing the event name string in as an argument.",
              "className": "definitionText",
            },
            "ref": null,
            "rendered": "Simulates an event on an element by passing the event name string in as an argument.",
            "type": "p",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <Button
                  buttonText="Nailed it!"
                  cardId={214}
                  getRandomCard={[MockFunction]}
                  lable="Remove this flashcard, this one is memorized!"
                  removeFromDeck={[MockFunction]}
                  type="removeBtn"
                />,
                <Button
                  buttonText="So Close!"
                  getRandomCard={[MockFunction]}
                  lable="Better come back to that one later."
                  type="almostBtn"
                />,
                <Button
                  buttonText="Not a clue."
                  cardId={214}
                  getRandomCard={[MockFunction]}
                  lable="Yikes, I need extra review on that one!"
                  type="wrongAnswerBtn"
                />,
              ],
              "className": "buttons",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "buttonText": "Nailed it!",
                  "cardId": 214,
                  "getRandomCard": [MockFunction],
                  "lable": "Remove this flashcard, this one is memorized!",
                  "removeFromDeck": [MockFunction],
                  "type": "removeBtn",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "buttonText": "So Close!",
                  "getRandomCard": [MockFunction],
                  "lable": "Better come back to that one later.",
                  "type": "almostBtn",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "buttonText": "Not a clue.",
                  "cardId": 214,
                  "getRandomCard": [MockFunction],
                  "lable": "Yikes, I need extra review on that one!",
                  "type": "wrongAnswerBtn",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": "form",
          },
        ],
        "type": "article",
      },
    ],
    "type": "section",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <article
            className="termSide card"
          >
            <h4
              className="termText"
            >
              .simulate()
            </h4>
            <div
              className="iconBtnWrapper"
            >
              <img
                alt="I am a little trash can! Click me to remove this card from the deck."
                className="icon trash"
                role="button"
                src="trash.png"
              />
              <img
                alt="I am a curved arrow! Click me to filp the card over and see the answer."
                className="icon arrow"
                role="button"
                src="flipArrow.png"
              />
            </div>
          </article>,
          <article
            className="definitionSide card"
          >
            <p
              className="definitionText"
            >
              Simulates an event on an element by passing the event name string in as an argument.
            </p>
            <form
              className="buttons"
            >
              <Button
                buttonText="Nailed it!"
                cardId={214}
                getRandomCard={[MockFunction]}
                lable="Remove this flashcard, this one is memorized!"
                removeFromDeck={[MockFunction]}
                type="removeBtn"
              />
              <Button
                buttonText="So Close!"
                getRandomCard={[MockFunction]}
                lable="Better come back to that one later."
                type="almostBtn"
              />
              <Button
                buttonText="Not a clue."
                cardId={214}
                getRandomCard={[MockFunction]}
                lable="Yikes, I need extra review on that one!"
                type="wrongAnswerBtn"
              />
            </form>
          </article>,
        ],
        "className": "featuredCard",
        "id": 214,
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <h4
                className="termText"
              >
                .simulate()
              </h4>,
              <div
                className="iconBtnWrapper"
              >
                <img
                  alt="I am a little trash can! Click me to remove this card from the deck."
                  className="icon trash"
                  role="button"
                  src="trash.png"
                />
                <img
                  alt="I am a curved arrow! Click me to filp the card over and see the answer."
                  className="icon arrow"
                  role="button"
                  src="flipArrow.png"
                />
              </div>,
            ],
            "className": "termSide card",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": ".simulate()",
                "className": "termText",
              },
              "ref": null,
              "rendered": ".simulate()",
              "type": "h4",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <img
                    alt="I am a little trash can! Click me to remove this card from the deck."
                    className="icon trash"
                    role="button"
                    src="trash.png"
                  />,
                  <img
                    alt="I am a curved arrow! Click me to filp the card over and see the answer."
                    className="icon arrow"
                    role="button"
                    src="flipArrow.png"
                  />,
                ],
                "className": "iconBtnWrapper",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "alt": "I am a little trash can! Click me to remove this card from the deck.",
                    "className": "icon trash",
                    "role": "button",
                    "src": "trash.png",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": "img",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "alt": "I am a curved arrow! Click me to filp the card over and see the answer.",
                    "className": "icon arrow",
                    "role": "button",
                    "src": "flipArrow.png",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": "img",
                },
              ],
              "type": "div",
            },
          ],
          "type": "article",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <p
                className="definitionText"
              >
                Simulates an event on an element by passing the event name string in as an argument.
              </p>,
              <form
                className="buttons"
              >
                <Button
                  buttonText="Nailed it!"
                  cardId={214}
                  getRandomCard={[MockFunction]}
                  lable="Remove this flashcard, this one is memorized!"
                  removeFromDeck={[MockFunction]}
                  type="removeBtn"
                />
                <Button
                  buttonText="So Close!"
                  getRandomCard={[MockFunction]}
                  lable="Better come back to that one later."
                  type="almostBtn"
                />
                <Button
                  buttonText="Not a clue."
                  cardId={214}
                  getRandomCard={[MockFunction]}
                  lable="Yikes, I need extra review on that one!"
                  type="wrongAnswerBtn"
                />
              </form>,
            ],
            "className": "definitionSide card",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Simulates an event on an element by passing the event name string in as an argument.",
                "className": "definitionText",
              },
              "ref": null,
              "rendered": "Simulates an event on an element by passing the event name string in as an argument.",
              "type": "p",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <Button
                    buttonText="Nailed it!"
                    cardId={214}
                    getRandomCard={[MockFunction]}
                    lable="Remove this flashcard, this one is memorized!"
                    removeFromDeck={[MockFunction]}
                    type="removeBtn"
                  />,
                  <Button
                    buttonText="So Close!"
                    getRandomCard={[MockFunction]}
                    lable="Better come back to that one later."
                    type="almostBtn"
                  />,
                  <Button
                    buttonText="Not a clue."
                    cardId={214}
                    getRandomCard={[MockFunction]}
                    lable="Yikes, I need extra review on that one!"
                    type="wrongAnswerBtn"
                  />,
                ],
                "className": "buttons",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "buttonText": "Nailed it!",
                    "cardId": 214,
                    "getRandomCard": [MockFunction],
                    "lable": "Remove this flashcard, this one is memorized!",
                    "removeFromDeck": [MockFunction],
                    "type": "removeBtn",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "buttonText": "So Close!",
                    "getRandomCard": [MockFunction],
                    "lable": "Better come back to that one later.",
                    "type": "almostBtn",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "buttonText": "Not a clue.",
                    "cardId": 214,
                    "getRandomCard": [MockFunction],
                    "lable": "Yikes, I need extra review on that one!",
                    "type": "wrongAnswerBtn",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
              ],
              "type": "form",
            },
          ],
          "type": "article",
        },
      ],
      "type": "section",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;
