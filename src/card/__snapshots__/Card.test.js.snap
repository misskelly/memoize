// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Card should match snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Card />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <article
          className="termSide card"
        >
          <h4
            className="termText"
          />
        </article>,
        <article
          className="definitionSide card"
        >
          <p
            className="definitionText"
          />
          <form
            className="buttons"
          >
            <Button
              buttonText="Nailed it!"
              lable="Remove this flashcard, this one is memorized!"
              type="removeBtn"
            />
            <Button
              buttonText="So Close!"
              lable="Better come back to that one later."
              type="almostBtn"
            />
            <Button
              buttonText="Not a clue."
              lable="Yikes, I need extra review on that one! Better add a duplicate!"
              type="wrongAnswerBtn"
            />
          </form>
        </article>,
      ],
      "className": "featuredCard",
      "id": undefined,
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <h4
            className="termText"
          />,
          "className": "termSide card",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": undefined,
            "className": "termText",
          },
          "ref": null,
          "rendered": null,
          "type": "h4",
        },
        "type": "article",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <p
              className="definitionText"
            />,
            <form
              className="buttons"
            >
              <Button
                buttonText="Nailed it!"
                lable="Remove this flashcard, this one is memorized!"
                type="removeBtn"
              />
              <Button
                buttonText="So Close!"
                lable="Better come back to that one later."
                type="almostBtn"
              />
              <Button
                buttonText="Not a clue."
                lable="Yikes, I need extra review on that one! Better add a duplicate!"
                type="wrongAnswerBtn"
              />
            </form>,
          ],
          "className": "definitionSide card",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": undefined,
              "className": "definitionText",
            },
            "ref": null,
            "rendered": null,
            "type": "p",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <Button
                  buttonText="Nailed it!"
                  lable="Remove this flashcard, this one is memorized!"
                  type="removeBtn"
                />,
                <Button
                  buttonText="So Close!"
                  lable="Better come back to that one later."
                  type="almostBtn"
                />,
                <Button
                  buttonText="Not a clue."
                  lable="Yikes, I need extra review on that one! Better add a duplicate!"
                  type="wrongAnswerBtn"
                />,
              ],
              "className": "buttons",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "buttonText": "Nailed it!",
                  "cardId": undefined,
                  "lable": "Remove this flashcard, this one is memorized!",
                  "removeFromDeck": undefined,
                  "type": "removeBtn",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "buttonText": "So Close!",
                  "lable": "Better come back to that one later.",
                  "type": "almostBtn",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "buttonText": "Not a clue.",
                  "cardId": undefined,
                  "lable": "Yikes, I need extra review on that one! Better add a duplicate!",
                  "type": "wrongAnswerBtn",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": "form",
          },
        ],
        "type": "article",
      },
    ],
    "type": "section",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <article
            className="termSide card"
          >
            <h4
              className="termText"
            />
          </article>,
          <article
            className="definitionSide card"
          >
            <p
              className="definitionText"
            />
            <form
              className="buttons"
            >
              <Button
                buttonText="Nailed it!"
                lable="Remove this flashcard, this one is memorized!"
                type="removeBtn"
              />
              <Button
                buttonText="So Close!"
                lable="Better come back to that one later."
                type="almostBtn"
              />
              <Button
                buttonText="Not a clue."
                lable="Yikes, I need extra review on that one! Better add a duplicate!"
                type="wrongAnswerBtn"
              />
            </form>
          </article>,
        ],
        "className": "featuredCard",
        "id": undefined,
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <h4
              className="termText"
            />,
            "className": "termSide card",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": undefined,
              "className": "termText",
            },
            "ref": null,
            "rendered": null,
            "type": "h4",
          },
          "type": "article",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <p
                className="definitionText"
              />,
              <form
                className="buttons"
              >
                <Button
                  buttonText="Nailed it!"
                  lable="Remove this flashcard, this one is memorized!"
                  type="removeBtn"
                />
                <Button
                  buttonText="So Close!"
                  lable="Better come back to that one later."
                  type="almostBtn"
                />
                <Button
                  buttonText="Not a clue."
                  lable="Yikes, I need extra review on that one! Better add a duplicate!"
                  type="wrongAnswerBtn"
                />
              </form>,
            ],
            "className": "definitionSide card",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": undefined,
                "className": "definitionText",
              },
              "ref": null,
              "rendered": null,
              "type": "p",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <Button
                    buttonText="Nailed it!"
                    lable="Remove this flashcard, this one is memorized!"
                    type="removeBtn"
                  />,
                  <Button
                    buttonText="So Close!"
                    lable="Better come back to that one later."
                    type="almostBtn"
                  />,
                  <Button
                    buttonText="Not a clue."
                    lable="Yikes, I need extra review on that one! Better add a duplicate!"
                    type="wrongAnswerBtn"
                  />,
                ],
                "className": "buttons",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "buttonText": "Nailed it!",
                    "cardId": undefined,
                    "lable": "Remove this flashcard, this one is memorized!",
                    "removeFromDeck": undefined,
                    "type": "removeBtn",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "buttonText": "So Close!",
                    "lable": "Better come back to that one later.",
                    "type": "almostBtn",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "buttonText": "Not a clue.",
                    "cardId": undefined,
                    "lable": "Yikes, I need extra review on that one! Better add a duplicate!",
                    "type": "wrongAnswerBtn",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
              ],
              "type": "form",
            },
          ],
          "type": "article",
        },
      ],
      "type": "section",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;
